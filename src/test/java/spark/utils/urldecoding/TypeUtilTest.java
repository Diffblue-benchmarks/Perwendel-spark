/*
 * Copyright 2018 Diffblue Limited
 *
 * Diffblue Limited licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package spark.utils.urldecoding;

import org.junit.Assert;
import org.junit.Rule;
import org.junit.Test;
import org.junit.rules.ExpectedException;
import spark.utils.urldecoding.TypeUtil;

import java.lang.reflect.Method;

public class TypeUtilTest {

  @Rule public ExpectedException thrown = ExpectedException.none();

  /* testedClasses: TypeUtil */


  /*
   * Test generated by Diffblue Deeptest.
   * This test case covers:
   *  - conditional line 222 branch to line 222
   *  - conditional line 222 branch to line 225
   */

  @Test
  public void convertHexDigitInputPositiveOutputPositive() {

    // Arrange
    final int c = 56;

    // Act
    final int retval = TypeUtil.convertHexDigit(c);

    // Assert result
    Assert.assertEquals(8, retval);
  }

  /*
   * Test generated by Diffblue Deeptest.This test covers `int parseInt(String,
   * int, int)' block 2 (line 163)
   * This test covers `int parseInt(String, int, int)' block 3 (line 165)
   * This test covers `int parseInt(String, int, int)' block 4 (line 166)
   * This test covers `int parseInt(String, int, int)' block 5 (line 166)
   * This test covers `int parseInt(String, int, int)' block 6 (line 169)
   * This test covers `int parseInt(String, int, int)' block 7 (line 169)
   * This test covers `int parseInt(String, int, int)' block 9 (line 170)
   *
   */

  @Test
  public void parseIntInputNotNullNegativeNegativeZeroOutputStringIndexOutOfBoundsException() {

    // Arrange
    final String s = "##########";
    final int offset = -532_938_730;
    final int length = -2_142_283_760;
    final int base = 0;

    // Act
    thrown.expect(StringIndexOutOfBoundsException.class);
    TypeUtil.parseInt(s, offset, length, base);

    // Method is not expected to return due to exception thrown
  }

  /*
   * Test generated by Diffblue Deeptest.
   * This test case covers:
   *  - conditional line 165 branch to line 166
   *  - conditional line 169 branch to line
   */

  @Test
  public void parseIntInputNotNullPositiveNegativeZeroOutputZero() {

    // Arrange
    final String s = "##########";
    final int offset = 1_614_544_918;
    final int length = -2_142_283_760;
    final int base = 0;

    // Act
    final int retval = TypeUtil.parseInt(s, offset, length, base);

    // Assert result
    Assert.assertEquals(0, retval);
  }

  /*
   * Test generated by Diffblue Deeptest.This test covers `int parseInt(String,
   * int, int)' block 2 (line 163)
   * This test covers `int parseInt(String, int, int)' block 3 (line 165)
   * This test covers `int parseInt(String, int, int)' block 6 (line 169)
   * This test covers `int parseInt(String, int, int)' block 7 (line 169)
   * This test covers `int parseInt(String, int, int)' block 9 (line 170)
   *
   */

  @Test
  public void parseIntInputNotNullPositivePositiveZeroOutputStringIndexOutOfBoundsException() {

    // Arrange
    final String s = "";
    final int offset = 24_704_770;
    final int length = 9_204_095;
    final int base = 0;

    // Act
    thrown.expect(StringIndexOutOfBoundsException.class);
    TypeUtil.parseInt(s, offset, length, base);

    // Method is not expected to return due to exception thrown
  }

  /*
   * Test generated by Diffblue Deeptest.
   * This test case covers:
   *  - spark/utils/urldecoding/TypeUtil.java:236: loop: 1 iterations
   *  - iteration 1
   *     - conditional line 239 branch to line 240
   *     - conditional line 244 branch to line 247
   */

  @Test
  public void toHexStringInput1ZeroPositiveOutputNotNull() {

    // Arrange
    final byte[] b = {(byte)-96};
    final int offset = 0;
    final int length = 1;

    // Act
    final String retval = TypeUtil.toHexString(b, offset, length);

    // Assert result
    Assert.assertEquals("A0", retval);
  }

  /*
   * Test generated by Diffblue Deeptest.
   * This test case covers:
   *  - spark/utils/urldecoding/TypeUtil.java:236: loop: 1 iterations
   *  - iteration 1
   *     - conditional line 239 branch to line 240
   *     - conditional line 244 branch to line 245
   */

  @Test
  public void toHexStringInput1ZeroPositiveOutputNotNull2() {

    // Arrange
    final byte[] b = {(byte)-84};
    final int offset = 0;
    final int length = 1;

    // Act
    final String retval = TypeUtil.toHexString(b, offset, length);

    // Assert result
    Assert.assertEquals("Ac", retval);
  }

  /*
   * Test generated by Diffblue Deeptest.
   * This test case covers:
   *
   */

  @Test
  public void toHexStringInputNullZeroZeroOutputNotNull() {

    // Arrange
    final byte[] b = null;
    final int offset = 0;
    final int length = 0;

    // Act
    final String retval = TypeUtil.toHexString(b, offset, length);

    // Assert result
    Assert.assertEquals("", retval);
  }

  /*
   * Test generated by Diffblue Deeptest.
   * This test case covers:
   *  - spark/utils/urldecoding/TypeUtil.java:184: loop: 1 iterations
   *  - iteration 1
   *     - conditional line 187 branch to line 190
   *     - conditional line 192 branch to line 195
   */

  @Test
  public void toStringInput1NegativeOutputNotNull() {

    // Arrange
    final byte[] bytes = {(byte)0};
    final int base = -2_147_483_648;

    // Act
    final String retval = TypeUtil.toString(bytes, base);

    // Assert result
    Assert.assertEquals("00", retval);
  }

  /*
   * Test generated by Diffblue Deeptest.
   * This test case covers:
   *  - spark/utils/urldecoding/TypeUtil.java:184: loop: 1 iterations
   *  - iteration 1
   *     - conditional line 187 branch to line 190
   *     - conditional line 192 branch to line 193
   */

  @Test
  public void toStringInput1NegativeOutputNotNull2() {

    // Arrange
    final byte[] bytes = {(byte)10};
    final int base = -2_147_483_648;

    // Act
    final String retval = TypeUtil.toString(bytes, base);

    // Assert result
    Assert.assertEquals("0a", retval);
  }

  /*
   * Test generated by Diffblue Deeptest.
   * This test case covers:
   *  - spark/utils/urldecoding/TypeUtil.java:184: loop: 1 iterations
   *  - iteration 1
   *     - conditional line 187 branch to line 188
   *     - conditional line 192 branch to line 195
   */

  @Test
  public void toStringInput1PositiveOutputNotNull() {

    // Arrange
    final byte[] bytes = {(byte)-54};
    final int base = 20;

    // Act
    final String retval = TypeUtil.toString(bytes, base);

    // Assert result
    Assert.assertEquals("a2", retval);
  }

}
