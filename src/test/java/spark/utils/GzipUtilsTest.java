/*
 * Copyright 2018 Diffblue Limited
 *
 * Diffblue Limited licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package spark.utils;

import com.diffblue.deeptestutils.Reflector;
import org.junit.Assert;
import org.junit.Rule;
import org.junit.Test;
import org.junit.rules.ExpectedException;

import java.lang.reflect.Constructor;
import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;

public class GzipUtilsTest {

  @Rule public ExpectedException thrown = ExpectedException.none();

  /* testedClasses: GzipUtils */

  /*
   * Test generated by Diffblue Deeptest.
   * This test case covers:
   *  - conditional line 91 branch to line 92
   */

  @Test
  public void testInputNullOutputFalse()
      throws NoSuchMethodException, IllegalAccessException, InvocationTargetException {

    // Arrange
    final Object objectUnderTest = Reflector.getInstance("spark.utils.GzipUtils$StringMatch");
    final String s = null;

    // Act
    final Class<?> classUnderTest = Reflector.forName("spark.utils.GzipUtils$StringMatch");
    final Method methodUnderTest =
        classUnderTest.getDeclaredMethod("test", Reflector.forName("java.lang.String"));
    methodUnderTest.setAccessible(true);
    final boolean retval = (boolean)methodUnderTest.invoke(objectUnderTest, s);

    // Assert result
    Assert.assertEquals(false, retval);
  }
}
