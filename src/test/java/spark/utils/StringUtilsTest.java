/*
 * Copyright 2018 Diffblue Limited
 *
 * Diffblue Limited licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package spark.utils;

import org.junit.Assert;
import org.junit.Rule;
import org.junit.Test;
import org.junit.rules.ExpectedException;
import spark.utils.StringUtils;

import java.lang.reflect.Array;
import java.util.Collection;

public class StringUtilsTest {

  @Rule public ExpectedException thrown = ExpectedException.none();

  /* testedClasses: StringUtils */

  /*
   * Test generated by Diffblue Deeptest.
   * This test case covers:
   *  - conditional line 198 branch to line 199
   *  - conditional line 199 branch to line 199
   *  - conditional line 200 branch to line 203
   */

  @Test
  public void applyRelativePathInputNotNullNotNullOutputNotNull() {

    // Arrange
    final String path = "/";
    final String relativePath = "/";

    // Act
    final String retval = StringUtils.applyRelativePath(path, relativePath);

    // Assert result
    Assert.assertEquals("/", retval);
  }

  /*
   * Test generated by Diffblue Deeptest.
   * This test case covers:
   *  - conditional line 198 branch to line 205
   */

  @Test
  public void applyRelativePathInputNotNullNotNullOutputNotNull2() {

    // Arrange
    final String path = "";
    final String relativePath = ".";

    // Act
    final String retval = StringUtils.applyRelativePath(path, relativePath);

    // Assert result
    Assert.assertEquals(".", retval);
  }

  /*
   * Test generated by Diffblue Deeptest.
   * This test case covers:
   *  - conditional line 198 branch to line 199
   *  - conditional line 199 branch to line 199
   *  - conditional line 200 branch to line 201
   */

  @Test
  public void applyRelativePathInputNotNullNotNullOutputNotNull3() {

    // Arrange
    final String path = "/";
    final String relativePath = ".";

    // Act
    final String retval = StringUtils.applyRelativePath(path, relativePath);

    // Assert result
    Assert.assertEquals("/.", retval);
  }

  /*
   * Test generated by Diffblue Deeptest.
   * This test case covers:
   *  - conditional line 160 branch to line 160
   *  - conditional line 160 branch to line 163
   *  - spark/utils/StringUtils.java:164: loop: 1 iterations
   *  - iteration 1
   *     - conditional line 165 branch to line 165
   *     - conditional line 166 branch to line 167
   */

  @Test
  public void deleteAnyInputNotNullNotNullOutputNotNull() {

    // Arrange
    final String inString = "\'";
    final String charsToDelete = "\"\"\"\"\"\"\"";

    // Act
    final String retval = StringUtils.deleteAny(inString, charsToDelete);

    // Assert result
    Assert.assertEquals("\'", retval);
  }

  /*
   * Test generated by Diffblue Deeptest.
   * This test case covers:
   *  - conditional line 160 branch to line 160
   *  - conditional line 160 branch to line 163
   *  - spark/utils/StringUtils.java:164: loop: 1 iterations
   *  - iteration 1
   *     - conditional line 165 branch to line 165
   *     - conditional line 166 branch to line 164
   */

  @Test
  public void deleteAnyInputNotNullNotNullOutputNotNull2() {

    // Arrange
    final String inString = "\"";
    final String charsToDelete = "#\"\"\"";

    // Act
    final String retval = StringUtils.deleteAny(inString, charsToDelete);

    // Assert result
    Assert.assertEquals("", retval);
  }

  /*
   * Test generated by Diffblue Deeptest.
   * This test case covers:
   *  - conditional line 313 branch to line 316
   *  - conditional line 316 branch to line 319
   *  - conditional line 320 branch to line 321
   *  - conditional line 321 branch to line
   */

  @Test
  public void delimitedListToStringArrayInputNotNullNotNullNotNullOutput0() {

    // Arrange
    final String str = "";
    final String delimiter = "";
    final String charsToDelete = "7u_U{{{{{";

    // Act
    final String[] retval = StringUtils.delimitedListToStringArray(str, delimiter, charsToDelete);

    // Assert result
    Assert.assertArrayEquals(new String[] {}, retval);
  }

  /*
   * Test generated by Diffblue Deeptest.
   * This test case covers:
   *  - conditional line 313 branch to line 316
   *  - conditional line 316 branch to line 319
   *  - conditional line 320 branch to line 321
   *  - spark/utils/StringUtils.java:321: loop: 1 iterations
   *  - iteration 1
   *     - conditional line 322 branch to line 322
   */

  @Test
  public void delimitedListToStringArrayInputNotNullNotNullNotNullOutput1() {

    // Arrange
    final String str = "K";
    final String delimiter = "";
    final String charsToDelete = "7wOWkkkkk";

    // Act
    final String[] retval = StringUtils.delimitedListToStringArray(str, delimiter, charsToDelete);

    // Assert result
    Assert.assertArrayEquals(new String[] {"K"}, retval);
  }

  /*
   * Test generated by Diffblue Deeptest.
   * This test case covers:
   *  - conditional line 313 branch to line 316
   *  - conditional line 316 branch to line 317
   */

  @Test
  public void delimitedListToStringArrayInputNotNullNullNotNullOutput1() {

    // Arrange
    final String str = "";
    final String delimiter = null;
    final String charsToDelete = "7wOWZZZZZ";

    // Act
    final String[] retval = StringUtils.delimitedListToStringArray(str, delimiter, charsToDelete);

    // Assert result
    Assert.assertArrayEquals(new String[] {""}, retval);
  }

  /*
   * Test generated by Diffblue Deeptest.
   * This test case covers:
   *  - conditional line 313 branch to line 314
   */

  @Test
  public void delimitedListToStringArrayInputNullNullNotNullOutput0() {

    // Arrange
    final String str = null;
    final String delimiter = null;
    final String charsToDelete = "7wOW{{{{{";

    // Act
    final String[] retval = StringUtils.delimitedListToStringArray(str, delimiter, charsToDelete);

    // Assert result
    Assert.assertArrayEquals(new String[] {}, retval);
  }


  /*
   * Test generated by Diffblue Deeptest.
   * This test case covers:
   *  - conditional line 97 branch to line 97
   */

  @Test
  public void isNotEmptyInputNotNullOutputFalse() {

    // Arrange
    final String str = "";

    // Act
    final boolean retval = StringUtils.isNotEmpty(str);

    // Assert result
    Assert.assertEquals(false, retval);
  }

  /*
   * Test generated by Diffblue Deeptest.
   * This test case covers:
   *  - conditional line 97 branch to line 97
   */

  @Test
  public void isNotEmptyInputNotNullOutputTrue() {

    // Arrange
    final String str = "!!!!";

    // Act
    final boolean retval = StringUtils.isNotEmpty(str);

    // Assert result
    Assert.assertEquals(true, retval);
  }

  /*
   * Test generated by Diffblue Deeptest.
   * This test case covers:
   *  - conditional line 397 branch to line 397
   *  - conditional line 397 branch to line 398
   *  - conditional line 398 branch to line 398
   *  - conditional line 401 branch to line 402
   *  - conditional line 402 branch to line 402
   */

  @Test
  public void removeLeadingAndTrailingSlashesFromInputNotNullOutputNotNull() {

    // Arrange
    final String string = "////////\\";

    // Act
    final String retval = StringUtils.removeLeadingAndTrailingSlashesFrom(string);

    // Assert result
    Assert.assertEquals("///////", retval);
  }

  /*
   * Test generated by Diffblue Deeptest.
   * This test case covers:
   *  - conditional line 397 branch to line 398
   *  - conditional line 398 branch to line 398
   *  - conditional line 401 branch to line 402
   *  - conditional line 402 branch to line 402
   */

  @Test
  public void removeLeadingAndTrailingSlashesFromInputNotNullOutputNotNull2() {

    // Arrange
    final String string = "/)))))((/";

    // Act
    final String retval = StringUtils.removeLeadingAndTrailingSlashesFrom(string);

    // Assert result
    Assert.assertEquals(")))))((", retval);
  }

}
